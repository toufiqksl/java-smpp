/*
 * Copyright (c) Nmote d.o.o. 2003-2015. All rights reserved.
 * See LICENSE.txt for licensing information.
 */

/*
 * WARNING Do not modify this file.
 *
 * This file was generated from protocol description file
 * and will be OVERWRITTEN on next invocation of
 * smpp-gen ant task during build process.
 */

package $package;

import java.io.IOException;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.EqualsBuilder;

#set( $className = $format.classCase($pdu.name) )
/**
 * $!pdu.docs
 *
 * @author (this class was autogenerated)
 */
public class ${className}PDU extends AbstractPDU {

    private static final long serialVersionUID = About.SERIAL_VERSION_UID;

    /**
     * Creates a new PDU object.
     */
    public ${className}PDU() {
    }

    /**
     * Returns Command ID for this PDU.
     *
     * @return PDU.$format.upperCase($pdu.name);
     */
    public int getCommandId() {
        return PDU.$format.upperCase($pdu.name);
    }

    /**
     * Reads mandatory and optional parameters from SMPPInputStream.
     *
     * @param in SMPPInputStream for reading parameters.
     * @throws IOException In case of a problem while reading data.
     */
    void readParameters(SMPPInputStream in) throws IOException {
		// Mandatory parameters
#foreach( $p in $pdu.mandatory )
		$p.name = in.read${p.type}();
#end

		// Optional parameters
		readOptionalParameters(in);
    }

    /**
     * Write mandatory and optional PDU parameters to SMPPOutputStream.
     *
     * @param out SMPPOutputStream for writting paramters.
     * @throws IOException In case of errors while writing.
     */
    void writeParameters(SMPPOutputStream out) throws IOException {
        // Mandatory parameters
#foreach ( $p in $pdu.mandatory )
		out.write${p.type}(${p.name});
#end

		// Optional parameters
		writeOptionalParameters(out);
    }

    /**
     * @see com.nmote.smpp.AbstractPDU#isRequestPDU()
     */
	public boolean isRequestPDU() {
#if( $pdu.isRequest() )
		return true;
#else
		return false;
#end
	}

	/**
	 * @see com.nmote.smpp.AbstractPDU#createResponse()
	 */
	public AbstractPDU createResponse() {
#if( $pdu.isRequest() )
#set( $resp = $protocol.getResponsePDU($pdu) )
#if( $resp )
#set( $respClassName = $format.classCase($resp.name) )
		${respClassName}PDU response = new ${respClassName}PDU();
		response.sequence = sequence;
		return response;
#else
		return null;
#end
#else
		throw new UnsupportedOperationException();
#end
	}

	/**
	 * @see com.nmote.smpp.AbstractPDU#isOneWay()
	 */
	public final boolean isOneWay() {
#if( $pdu.isRequest() )
#set( $resp = $protocol.getResponsePDU($pdu) )
#if( $resp )
		return false;
#else
		return true;
#end
#else
		return false;
#end
	}

    /**
     * Returns PDU name.
     *
     * @return PDU name
     */
    public String getName() {
    	return "$pdu.name";
    }

    /**
     * Creates a string representation of a PDU.
     *
     * @return a String
     */
    public String toString() {
    	ToStringBuilder b = new ToStringBuilder(this);
    	b.append(getSequence());
    	b.append(ESMEStatus.toString(getStatus()));

        // Appending mandatory parameters
#foreach ( $p in $pdu.mandatory )
        b.append("${p.name}", toStringHelper(${p.name}));
#end

        // Appending optional parameters
        if (getParameters() != null) {
        	b.append(getParameters());
        }

        return b.toString();
    }

    /**
     * Calculates hash code of this object.
     *
     * @return hash code
     */
    public int hashCode() {
    	HashCodeBuilder b = new HashCodeBuilder();
    	b.append(getSequence());
    	b.append(getStatus());

        // Appending mandatory parameters
#foreach ( $p in $pdu.mandatory )
        b.append(${p.name});
#end

        // Appending optional parameters
        if (getParameters() != null) {
        	b.append(getParameters());
        }

        return b.toHashCode();
    }

    /**
     * Checks if <code>o</code> and this object are equal.
     *
     * @return true if objects are equal, false otherwise
     */
    public boolean equals(Object o) {
    	boolean result;
    	if (o instanceof ${className}PDU) {
    		${className}PDU p = (${className}PDU) o;
    		EqualsBuilder b = new EqualsBuilder();
	    	b.append(p.getSequence(), getSequence());
    		b.append(p.getStatus(), getStatus());

	        // Appending mandatory parameters
#foreach ( $p in $pdu.mandatory )
    	    b.append(p.${p.name}, ${p.name});
#end

	        // Appending optional parameters
        	b.append(p.getParameters(), getParameters());

        	result = b.isEquals();
        } else {
        	result = false;
        }

        return result;
    }

    // Mandatory parameters
#foreach( $p in $pdu.mandatory )
#set( $n = $format.classCase($p.name) )
#set( $t = $format.javaType($p) )

    private $t $p.name#if( $p.def ) = ${p.def}#end;

    /**
     * Getter for a mandatory parameter $p.name.
     * $!p.docs
     * @return parameter value
     */
    public $t get${n}() {
		return $p.name;
    }

    /**
     * Setter for a mandatory parameter $p.name.
     * $!p.docs
     * @param value New parameter value.
     */
    public void set${n}($t value) {
		$p.name = value;
    }
#end
}