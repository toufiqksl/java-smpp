/*
 * Copyright (c) Nmote d.o.o. 2003-2015. All rights reserved.
 * See LICENSE.txt for licensing information.
 */

/*
 * WARNING Do not modify this file.
 *
 * This file was generated from protocol description file
 * and will be OVERWRITTEN on next invocation of
 * smpp-gen ant task during build process.
 */

package com.nmote.smpp;

/**
 * PDUFactory is used to instantiate PDU instances using a provided
 * id.
 *
 * @author (this class was autogenerated)
 */
public class PDUFactory {

	/**
	 * Instantiates a new PDU instance from a provided commandId.
	 *
	 * @param commandId SMPP command identificator
	 * @return PDU instance
	 */
    public AbstractPDU createPDU(int commandId) {
        AbstractPDU result;
		switch (commandId) {
	    	case PDU.OUTBIND: result = new OutbindPDU(); break;
	    	case PDU.BIND_TRANSMITTER: result = new BindTransmitterPDU(); break;
	    	case PDU.REPLACE_SM: result = new ReplaceSmPDU(); break;
	    	case PDU.QUERY_BROADCAST_SM: result = new QueryBroadcastSmPDU(); break;
	    	case PDU.SUBMIT_MULTI: result = new SubmitMultiPDU(); break;
	    	case PDU.QUERY_SM: result = new QuerySmPDU(); break;
	    	case PDU.ENQUIRE_LINK_RESP: result = new EnquireLinkRespPDU(); break;
	    	case PDU.DELIVER_SM: result = new DeliverSmPDU(); break;
	    	case PDU.BROADCAST_SM_RESP: result = new BroadcastSmRespPDU(); break;
	    	case PDU.DATA_SM: result = new DataSmPDU(); break;
	    	case PDU.BIND_TRANSMITTER_RESP: result = new BindTransmitterRespPDU(); break;
	    	case PDU.QUERY_BROADCAST_SM_RESP: result = new QueryBroadcastSmRespPDU(); break;
	    	case PDU.GENERIC_NACK: result = new GenericNackPDU(); break;
	    	case PDU.DELIVER_SM_RESP: result = new DeliverSmRespPDU(); break;
	    	case PDU.CANCEL_SM: result = new CancelSmPDU(); break;
	    	case PDU.BIND_RECEIVER: result = new BindReceiverPDU(); break;
	    	case PDU.SUBMIT_SM_RESP: result = new SubmitSmRespPDU(); break;
	    	case PDU.SUBMIT_MULTI_RESP: result = new SubmitMultiRespPDU(); break;
	    	case PDU.QUERY_SM_RESP: result = new QuerySmRespPDU(); break;
	    	case PDU.ALERT_NOTIFICATION: result = new AlertNotificationPDU(); break;
	    	case PDU.CANCEL_SM_RESP: result = new CancelSmRespPDU(); break;
	    	case PDU.BIND_RECEIVER_RESP: result = new BindReceiverRespPDU(); break;
	    	case PDU.SUBMIT_SM: result = new SubmitSmPDU(); break;
	    	case PDU.CANCEL_BROADCAST_SM_RESP: result = new CancelBroadcastSmRespPDU(); break;
	    	case PDU.DATA_SM_RESP: result = new DataSmRespPDU(); break;
	    	case PDU.UNBIND: result = new UnbindPDU(); break;
	    	case PDU.BROADCAST_SM: result = new BroadcastSmPDU(); break;
	    	case PDU.BIND_TRANSCEIVER: result = new BindTransceiverPDU(); break;
	    	case PDU.BIND_TRANSCEIVER_RESP: result = new BindTransceiverRespPDU(); break;
	    	case PDU.UNBIND_RESP: result = new UnbindRespPDU(); break;
	    	case PDU.CANCEL_BROADCAST_SM: result = new CancelBroadcastSmPDU(); break;
	    	case PDU.ENQUIRE_LINK: result = new EnquireLinkPDU(); break;
	    	case PDU.REPLACE_SM_RESP: result = new ReplaceSmRespPDU(); break;
		    default: throw new IllegalArgumentException("Unsupported PDU id=" + commandId);
		}
        return result;
    }
}